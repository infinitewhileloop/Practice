3) AWK introduction
a) awk '/is/' addr.txt 
b) awk '!/y/{print $1}' addr.txt
c) awk '(NF<=2){print}' addr.txt
d) awk '($2 ~ /is/)' addr.txt
e) awk 'sub(/o/, "0") 1' addr.txt
f) awk 'BEGIN{product=1} {product*=$NF} END{print product}' table.txt
g) printf 'last\nappend\nstop\ntail\n' | awk '{print$0 "." }'

4) Regular expressions
a) printf '%b' "$lines" | awk '/^den|ly$/'
b) echo 'hi42bye nice421423 bad42 cool_42a 42c' | awk '{gsub(/\B42\B/, "[&]")} 1'
c) echo "$words" | awk '{gsub(/\<s\S*(e\S*t|t\S*e)\S*\>/, "[&]")} 1'
d) echo 'area not a _a2_ roar took 22' | awk '{print gensub(/([ar])\> /, "\\1\n", "g")}'
e) echo '2.3/[4]|*6 foo 5.3-[4]|*9' | awk '{gsub(/\[4\]\|\*/, "2")} 1'
f) False
g) printf '%b' "$lines" | awk '/^hand(s|y|le)?$/'
h) echo 'a+42//5-c pressure*3+42/5-14256' | awk '{gsub(/42\/\/?5/, "8")} 1'
i) {0,1}, {0,}, {1,}
j) False
k) echo 'a/b(division) + c%d() - (a#(b)2(' | awk '{gsub(/\([^)]*)/, "")} 1'
   echo 'a/b(division) + c%d() - (a#(b)2(' | awk '{gsub(/\([^(]*)/, "")} 1'
l) awk '{print gensub(/#+ <a name="([^"]+)"><\/a>([a-zA-Z ]+)/, "[\\2](#\\1)", "g")}' anchors.txt
m) awk 'tolower($0) ~ /professor/ && /this|quip/' dracula.txt 
n) echo '_;3%,.,=-=,:' | awk '{print gensub(/^(([^,]+,){2})[^,]+/, "\\142", 1)}'
o) printf 'so and so also sow and soup'| awk '/(so.*){3,}/ {print gensub(/(.*)so((.*so){3})/, "\\1X\\2", 1)}'
p) echo "$words" | awk '{print gensub(/\<(imp|ant|(\w*))\>/, "(\\2)", "g")}'

5) Field seperators
a) awk -F'[()]' '{print $2}' brackets.txt 
b) awk -F',' -v OFS=':' '{print $1, $3}' scores.csv
c) awk -F',' '$2!="Maths" && $2>70 {print $1}' scores.csv
d) echo 'hi there' | awk -v FPAT='\\w' '{print NF}'
e) echo '1 "grape" and "mango" and "guava"' | awk -v FPAT='"[^"]+"' -v OFS=',' '{print $1, $3}'
f) echo '1,2,3,4,5'| awk -F',' -v OFS=',' '{print $1, $2, $NF}'
g) awk -v FIELDWIDTHS='3 2:2 4 3:8' -v OFS=, '{gsub(/  /, "NA")}; {print $1, $2, $4}' fw.txt
h) printf 'restore\ncat one\ncricket' | awk -F '' -v OFS='' '{print $3, $5}'

6) Record separators
a) awk -v FS='\\W+' -v OFS='\n' '{$1=$1} 1' jumbled.txt | awk '/an|at|in|it/'
b) awk -v ORS=',' '1' addr.txt | sed 's/,$/\n/'
c) awk -F, -v OFS=, 'NR==1{$5="GP"}; NR>1{$5=($2*2+$3+$4)/4} 1' scores.csv
d) /
e) awk -v ORS='. ' '1' sample.txt | sed 's# \. #\n\n#g' | awk '1'
f) awk 'NR<=2{print $1, $2}' mixed_fs.txt; awk -v FS=, -v OFS=, 'NR>2{print $1, $2}' mixed_fs.txt
g) awk 'NR!=2' table.txt
   awk '/air|win/ {print NR}' table.txt
   awk 'BEGIN{sum=0} NR!=2{sum+=$NF} END{print sum}' table.txt
h) seq 15 | awk 'NR%5==2{print}; NR%5==4{print}
i) /

7) In-place file editing
a) awk -i inplace -v inplace::suffix='.orig' 'sub(/2018/, "2020") 1' copyright.txt 
b) awk -i inplace '2<=FNR && FNR<=3' nums1.txt nums2.txt

8) Using shell variables
a) awk -v r="\\\<$s\\\>" '$0 ~ r' sample.txt
b) /

9) Control structures
a) awk '/^-/ {sub(/^-/, ""); print; next} {sub(/^/, "-"); print}' nums.txt
b) awk '{print gensub(/([^0-9. -]+)/, "\"\\1\"", "g")}' table.txt | awk -v OFS=, '{$1=$1} 1'
c) awk '{print gensub(/\S*(\S)/, "\\1", "g")}' secrets.txt | awk '{gsub(/\s+/, "")} 1'
d) awk '!/are/ {print} /are/ {print; exit}' sample.txt
   awk '!/are/ {print} /are/ {exit}' sample.txt
e) /

10) Built-in functions
a) awk -v FS=, 'BEGIN{PROCINFO["sorted_in"] = "@ind_num_desc"} NR==1{print} NR>1{a[$3]=$0} END{for(k in a) print a[k]}' scores.csv 
b) awk '{printf "%.4f\n", sqrt($1)}' nums3.txt
   awk '{printf "%.4e\n", sqrt($1)}' nums3.txt
c) echo 'go x:12:-425 og 6.2' | awk -v OFS= '{split($2, d, ":"); print $1, " ", d["1"], ":", d["2"], " ", $3, " ", $4 * d["3"]}'
d) echo 'f2:z3 kt//-42\\3.14//tw 5y6' | awk '{patsplit($2, a, /-?[0-9]+\.?[0-9]*/); $2=a[1] + a[2]} 1'
e) echo '3*f + (a^b) - 45' | awk -v s="$s" '{print substr($0, index($0, s))}'
f) echo "$s" | awk '{patsplit($0, a, /-[0-9]+[:;]/); for(i in a) print substr(a[i],2,length(a[i])-2)}'
g) awk -F, '{a=(($2+$3+$4)/3); p=sprintf("%s\t%.2f", $1, a)} a>=80 && NR>1 {print p > "pass.csv"; next} NR>1{print p > "fail.csv"}' scores.csv
h) awk '/^ / {system($0); next} !/^ / 1' files.txt
i) awk -v FIELDWIDTHS='5 5 4 8' '$4=sprintf("%.2e", $4){print}' fw.txt
j) awk '$0 ~ /e/ && $0 !~ /u/; $0 ~ /u/ && $0 !~ /e/' addr.txt 

11) Multiple file input
a) awk 'BEGINFILE{print ">"FILENAME"<"} FNR<=2{print $NF} ENDFILE{print "----------"}' table.txt FS=, scores.csv FIELDWIDTHS='14 *' fw.txt
b) awk 'BEGINFILE{m=0}; $3 ~ /at|fun/{m=1}; ENDFILE{if(m) print FILENAME}' sample.txt secrets.txt addr.txt table.txt

12) Processing multiple records
a) awk 'p1 ~ /you/ && p2 ~ /^$/ && /do/; 1 {p1=p2; p2=$0}' sample.txt
b) awk -v IGNORECASE=1 -v n=2 '/do/{c++} c==n{print $0; c++} /not/{d++} d==n{print $0; d++}' sample.txt
c) awk -v n=1 'NR>n && /are|bit/{print a[NR-n]; s=n+1} {a[NR]=$0} s && s--' sample.txt
d) awk '/top/{f=1; buf=$0; next} f{buf=buf ORS $0} /bottom/{if(f) print buf; f=0}' broken.txt | awk '!/^(top|bottom)$/'
e) awk -v n=2 '/###/{c++} c==n{print; if(/###/ && s++) exit}' concat.txt
f) awk -v IGNORECASE=1 '/```/{c++} {if(c%2==0) gsub(/ruby/, "Ruby"); print $0}' ruby.md >out.md

13) Two file processing
a) awk -v FPAT='[a-zA-Z]+' 'NR==FNR{a[$3]; next} $2 in a' match_words.txt jumbled.txt sample.txt
b) awk 'NR==FNR{d[NR]=$0; next} {printf "%s\n%s\n---\n", d[FNR], $0}' secrets.txt table.txt
c) /

14) Dealing with duplicates 
a) awk -v IGNORECASE=1 '!a[tolower($0)]++' lines.txt
b) awk '!a[$1,$2]++ && !a[$2,$1]++' twos.txt
c) awk 'NR==FNR{a[$1,$2]++; a[$2,$1]++; next} a[$1,$2]>1 || a[$2,$1]>1{print > "dupl.txt"} a[$1,$2]==1 && a[$2,$1]==1{print > "uniq.txt"}' twos.txt twos.txt

15) awk scripts
a) /
b) /
